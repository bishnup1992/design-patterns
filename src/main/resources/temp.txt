import streamlit as st
import requests

# --------------------------
# PAGE CONFIG & TITLE
# --------------------------
st.set_page_config(page_title="Agile Coach Chat", layout="centered")
st.title("ü§ñ Agile Coach Chat")

# --------------------------
# SIDEBAR CONFIG
# --------------------------
st.sidebar.header("üîê API Configuration")
auth_token = st.sidebar.text_input("Auth Token", type="password")
deployment_id = st.sidebar.text_input("Deployment ID", value="your-deployment-id")
conversation_id = st.sidebar.text_input("Conversation ID", value="your-conversation-id")
file_ids_input = st.sidebar.text_input("File IDs (comma separated)", value="file-id-1")
api_base_url = st.sidebar.text_input("API Base URL", value="https://api.openai.com/v1/chat/completions")

# --------------------------
# SYSTEM PROMPT TEMPLATE
# --------------------------
SYSTEM_PROMPT = (
    "You are an Agile Coach. Answer all questions related to Agile methodology "
    "clearly and concisely using real-world examples if possible."
)

# --------------------------
# CHAT HISTORY INIT
# --------------------------
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# --------------------------
# USER INPUT
# --------------------------
st.subheader("üí¨ Ask a question about Agile")
user_input = st.text_input("Enter your question", key="user_input")
submit = st.button("Send")

# --------------------------
# API CALL ON SUBMIT
# --------------------------
if submit and user_input:
    if not auth_token:
        st.error("Please enter a valid Auth Token.")
    else:
        full_message = f"{SYSTEM_PROMPT}\n\nUser: {user_input}"
        file_ids = [fid.strip() for fid in file_ids_input.split(",") if fid.strip()]
        invoke_url = f"{api_base_url}={deployment_id}"

        headers = {
            "Authorization": f"Bearer {auth_token}",
            "Content-Type": "application/json"
        }

        payload = {
            "ConversationId": conversation_id,
            "Message": full_message,
            "InputMode": "standard",
            "FileIds": file_ids
        }

        try:
            with st.spinner("Thinking..."):
                response = requests.post(invoke_url, headers=headers, json=payload)
                response.raise_for_status()
                data = response.json()
                reply = data.get("Message", "No message found in response.")

                # Add to history
                st.session_state.chat_history.append({"role": "user", "content": user_input})
                st.session_state.chat_history.append({"role": "assistant", "content": reply})

                # Clear input
                st.session_state.user_input = ""

        except requests.exceptions.RequestException as e:
            st.error(f"‚ùå Error communicating with the API: {str(e)}")

# --------------------------
# CHAT DISPLAY
# --------------------------
st.subheader("üìú Chat History")
for msg in st.session_state.chat_history:
    if msg["role"] == "user":
        st.markdown(f"üßë **You:** {msg['content']}")
    else:
        st.markdown(f"ü§ñ **Agile Coach:** {msg['content']}")
